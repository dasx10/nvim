snippet ed "export default" b
export default $1;
endsnippet

snippet ef "export function" b
export function $1($2) {
	$3
};$0
endsnippet

snippet eaf "export async function" b
export async function $1($2) {
	$3
	return $4;
};$0
endsnippet

snippet tc "try {} catch (error) {}" b
try {
	$1
} catch (error) {
	${2:throw error;}
}
endsnippet

snippet tf "try {} finally {}" b
try {
	$1
} finally {
	$2
}$0
endsnippet

snippet tcf "try {} catch (error) {} finally {}"
try {
	$1
} catch (error) {
	${2:throw error;}
} finally {
	$3
}$0
endsnippet

snippet \const index\ "const index = 0;" b
const index = ${1:0};
$0
endsnippet

snippet \const curry\ "const curry = ..." b
const curry = (executor, ...parrameters) => parrameters.length < executor.length
	? (...nextParameters) => curry(executor, ...parrameters, ...nextParameters)
	: executor(...parrameters);
endsnippet

snippet \const pipe\ "const pipe = ..." b
const pipe = (executors, ...args) => {
	const { length } = executors;
	if (length > 0) {
		let result = executors[0](...args);
		let index = 1;
		while (index < length) {
			result = executors[index](result);
			index++;
		}
		return result;
	}
	return args[0];
}
endsnippet
